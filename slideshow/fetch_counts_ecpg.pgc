EXEC SQL WHENEVER SQLERROR SQLPRINT;
EXEC SQL WHENEVER SQLWARNING SQLPRINT;

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include "at.h"
#include "popularity.h"

#define AT_ERR fputs(AT "\n",stderr);

void fetch_counts_ecpg(unsigned int * pool_count, unsigned int * spool_count){
	static unsigned int pool_count_cache, cache_flag=0;
	EXEC SQL BEGIN DECLARE SECTION;
	unsigned int pool_count_, spool_count_;
	EXEC SQL END DECLARE SECTION;
	if(!cache_flag){
		EXEC SQL SELECT known_paths_count() INTO :pool_count_;
		if(sqlca.sqlcode<0) exit(EXIT_FAILURE);
		pool_count_cache=pool_count_;
		cache_flag=1;
	}
	*pool_count=pool_count_cache;
	/* EXEC SQL SELECT COUNT(*) INTO :spool_count_ FROM SPOOL INNER JOIN PHOTOS ON SPOOL.hash = PHOTOS.hash WHERE PATH IS NOT NULL;
		slow query??? 
	EXEC SQL SELECT COUNT(*) INTO :spool_count_ FROM SPOOL WHERE EXISTS (SELECT * FROM PHOTOS WHERE PHOTOS.HASH=SPOOL.HASH AND PATH IS NOT NULL);
		if you assume the spool contains only current photos you save a lot of computation: */
	EXEC SQL SELECT count_estimate('spool') INTO :spool_count_;
	if(sqlca.sqlcode<0) exit(EXIT_FAILURE);
	*spool_count=spool_count_;
	EXEC SQL COMMIT;
	if(sqlca.sqlcode<0) exit(EXIT_FAILURE); }
