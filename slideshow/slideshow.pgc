//Use: popularity_slideshow photos@pg .cache/popularity/photos.dist

EXEC SQL WHENEVER SQLERROR CALL SQLPRINT;
EXEC SQL WHENEVER SQLWARNING CALL SQLPRINT;

#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#include <popularity.h>

#include "enspool.h"
#define NSECS_IN_SEC 1000000000
#define RESOLUTION_NSEC 50000000

#include "at.h"
#define AT_ERR fputs(AT "\n",stderr);

extern void fetch_counts_ecpg(unsigned int *, unsigned int *);

int despool
	(	const unsigned int spool_count, //no longer needed, was previously used in logic for selecting random row
		char * hash,
		float * display_time,
		float * delta_time)
	{	EXEC SQL BEGIN DECLARE SECTION;
			float _display_time, _delta_time;
			int ind;
			char _hash[2*SHA_DIGEST_LENGTH+1],*ctid=NULL;
			EXEC SQL END DECLARE SECTION;
		EXEC SQL BEGIN;
		EXEC SQL
			SELECT CTID INTO :ctid :ind FROM SPOOL
			tablesample system(least(ceiling(current_setting('block_size')::real/pg_relation_size('spool')*100),100)) order by random() limit 1;
		//(Use tablesample to get 1 random block from the table and then randomly order the rows in that block - 1 block takes up 1/(nblocks_in_table)*100 percent of the table)
		if (sqlca.sqlcode<0) exit(EXIT_FAILURE);
		if	(	ind<0
				|| !ctid //sometimes ctid null even though indicator not negative
			) { EXEC SQL COMMIT; if(ctid) free(ctid); return -1; }
		EXEC SQL
			SELECT hash,display_time,delta_time
			INTO :_hash, :_display_time, :_delta_time
			FROM SPOOL WHERE CTID=:ctid;
		if (sqlca.sqlcode<0) exit(EXIT_FAILURE);
		EXEC SQL DELETE FROM SPOOL WHERE CTID=:ctid;
		if (sqlca.sqlcode<0) exit(EXIT_FAILURE);
		EXEC SQL COMMIT;
		if (sqlca.sqlcode<0) exit(EXIT_FAILURE);
		free(ctid);
		strcpy(hash,_hash);
		*display_time=_display_time; *delta_time=_delta_time;
		return 0; }

char next
	(	unsigned int ndists,
		char const ** const distfiles,
		char * hash,
		float * display_time,
		float * delta_time,
		char * path)
	{	EXEC SQL BEGIN DECLARE SECTION;
		char _hash[2*SHA_DIGEST_LENGTH+1];
		VARCHAR _path[PATH_MAX];
		EXEC SQL END DECLARE SECTION;
		unsigned int pool_count, spool_count;
		fetch_counts_ecpg(&pool_count,&spool_count);
		if(random()/(double)RAND_MAX*(pool_count+spool_count*spool_count)<(spool_count*spool_count))
			if(!despool(spool_count,hash,display_time,delta_time)){
				strcpy(_hash,hash);
				EXEC SQL select path into :_path from pool where hash = :_hash;
				if	(sqlca.sqlcode<0)
					{	fprintf(
							stderr,
							"ERROR: Could not retrieve path for %s\n",
							_hash);
						 exit(EXIT_FAILURE); }
				EXEC SQL COMMIT;
				if (sqlca.sqlcode<0) exit(EXIT_FAILURE);
				strcpy(path,_path.arr);
				return 0; }
		if	(random_from_distfiles(ndists,distfiles,hash))
			{ AT_ERR; return 1; }
		strcpy(_hash,hash);
		EXEC SQL SELECT PATH INTO :_path FROM pool WHERE hash=:_hash;
		if (sqlca.sqlcode<0) exit(EXIT_FAILURE);
		EXEC SQL COMMIT;
		if (sqlca.sqlcode<0) exit(EXIT_FAILURE);
		strcpy(path,_path.arr);
		*display_time=random_time(pool_count,spool_count);
		*delta_time=0;
		return 0; }

void handlequeuedevents
	(
		Display *d,
		char * hash,
		float * display_time,
		float * delta_time,
		int * die, int waste)
	{
		unsigned int pool_count, spool_count;
		XEvent e;
		XKeyEvent k;
		KeySym ks;
		XComposeStatus cs;
		char c[2];
		float interval;
		c[1]=0;
		while	(XPending(d)){
			XNextEvent(d,&e);
			k=e.xkey;
			XLookupString(&k,c,1,&ks,&cs);
			if(c[0]=='q') *die=1;
			if(waste) continue;
			fetch_counts_ecpg(&pool_count, &spool_count);
			interval=random_time(pool_count,spool_count);
			switch(c[0]){
			case '-':
				//fputs("- event\n",stderr);
				if	(interval>*display_time)
					interval=*display_time;
				*delta_time-=interval;
				*display_time-=interval;
				break;
			case '=':
				//fputs("+ event\n",stderr);
				/*if(random()%maxtime>=interval){
					*display_time+=interval;
					*delta_time+=interval;
				}else*/
				enspool(hash,interval,interval);
				break;
			/* case '+': request_from_same_scene(hash); */ }}}

void paint(char * path){
	struct stat st;
	const int bufsize=1920;
	char buf[bufsize];
	int pid,exit_status, stderr_fds[2], stdout_fds[2], fno, extra_bytes;
	unsigned int before_marker;
	FILE *xli_stderr, *xli_stdout;
	static char last_path[PATH_MAX+1]="\0";
	if	(!strcmp(path,last_path))
		{	fprintf(stderr,
				"Not repainting repeated image: %s\n",path);
			return; }
	strncpy(last_path,path,PATH_MAX+1);
	last_path[PATH_MAX]='\0';
	if(stat(path,&st)){
		fprintf(stderr,"could not stat %s\n",path);
		exit(EXIT_FAILURE); }
	if	(pipe(stderr_fds))
		{ perror("pipe: "); AT_ERR; exit(EXIT_FAILURE); }
	if	(pipe(stdout_fds))
		{ perror("pipe: "); AT_ERR; exit(EXIT_FAILURE); }
	pid=fork();
	if(pid==-1){
		fprintf(stderr,"could not fork\n");
		exit(-1); }
	if	(!pid)
		{	if	(close(stderr_fds[0]))
				{ perror("close"); AT_ERR; exit(EXIT_FAILURE); }
			fno=fileno(stderr);
			if	(fno==-1)
				{ perror("fileno"); AT_ERR; exit(EXIT_FAILURE);}
			if	(dup2(stderr_fds[1],fno)==-1)
				{ perror("dup2"); AT_ERR; exit(EXIT_FAILURE); }
			if	(close(stdout_fds[0]))
				{ perror("close"); AT_ERR; exit(EXIT_FAILURE); }
			fno=fileno(stdout);
			if	(fno==-1)
				{ perror("fileno"); AT_ERR; exit(EXIT_FAILURE);}
			if	(dup2(stdout_fds[1],fno)==-1)
				{ perror("dup2"); AT_ERR; exit(EXIT_FAILURE); }
			execl(XLI_PATH,XLI_PATH,"-onroot","-fullscreen","-quiet","-at","0,0","-border","black",path,NULL);
			perror("execl"); exit(EXIT_FAILURE); }
	if	(close(stderr_fds[1]))
		{ perror("close"); AT_ERR; exit(EXIT_FAILURE); }
	exit_status=0;
	xli_stderr=fdopen(stderr_fds[0],"r");
	if	(!xli_stderr)
		{ perror("fdopen"); AT_ERR; exit(EXIT_FAILURE);}
	do	{	if	(!fgets(buf,bufsize,xli_stderr))
				{	if	(ferror(xli_stderr))
						{	perror("fgets"); AT_ERR;
							exit(EXIT_FAILURE); }
					break; }
			if	(fputs(buf,stderr)==EOF)
				{ perror("fputs"); AT_ERR; exit(EXIT_FAILURE); }
			if	(	!strcmp(buf,"Premature end of JPEG file\n")
					|| !strcmp(buf,"Corrupt JPEG data: premature end of data segment\n")
					|| sscanf(buf,"Corrupt JPEG data: %d extraneous bytes before marker 0x%x\n",&extra_bytes,&before_marker)==2)
				continue;
			exit_status|=1;
		}while(1);
	if	(fclose(xli_stderr))
		{ perror("fclose"); AT_ERR; exit(EXIT_FAILURE); }
	if	(close(stdout_fds[1]))
		{ perror("close"); AT_ERR; exit(EXIT_FAILURE); }
	xli_stdout=fdopen(stdout_fds[0],"r");
	if	(!xli_stdout)
		{ perror("fdopen"); AT_ERR; exit(EXIT_FAILURE);}
	do	{	if	(!fgets(buf,bufsize,xli_stdout))
				{	if	(ferror(xli_stdout))
						{	perror("fgets"); AT_ERR;
							exit(EXIT_FAILURE); }
					break; }
			if	(fputs(buf,stderr)==EOF)
				{ perror("fputs"); AT_ERR; exit(EXIT_FAILURE); }
			exit_status|=1;
		}while(1);
	if	(fclose(xli_stdout))
		{ perror("fclose"); AT_ERR; exit(EXIT_FAILURE); }
	if	(exit_status)
		{	fputs("xli wrote output, considering as err\n",stderr);
			exit(EXIT_FAILURE); }
	//xli returns 0 even on err
	waitpid(pid,&exit_status,0); }

#define DIE do{ \
	fprintf(stderr,__FILE__": error at line %u\n",__LINE__); \
	exit(EXIT_FAILURE); }while(0);

int main(int argc, char** argv){
	EXEC SQL BEGIN DECLARE SECTION;
	char * db = argv[1];
	char hash[2*SHA_DIGEST_LENGTH+1];
	float delta_time=0;
	int result, ind;
	EXEC SQL END DECLARE SECTION;
	Display * d;
	Window w;
	int dieflag=0;
	float display_time=0;
	char path[PATH_MAX+1];
	struct timespec rqt, rmt;
	puts("Version: " VERSION);
	if(!(d=XOpenDisplay(NULL))) DIE;
	w=XCreateSimpleWindow(d,XDefaultRootWindow(d),0,0,4,4,1,0,0xffffff);
	if
		(w==BadAlloc || w==BadColor || w==BadCursor || w==BadMatch || w==BadPixmap || w==BadValue || w==BadWindow)
		DIE;
	XSetIconName(d,w,"slideshow");
	if (XMapWindow(d,w)==BadWindow) DIE;
	if (XSelectInput(d,w,KeyPress)==BadWindow) DIE;
	
	EXEC SQL CONNECT TO :db;
	/* ECPGdebug(1,stderr); */
	
	srandom(time(NULL));
	rqt.tv_sec=0;
	rqt.tv_nsec=RESOLUTION_NSEC;
	
	while(1){
		if	(next(	argc-2,(char const ** const)&(argv[2]),hash,
				&display_time,&delta_time,path))
			{ AT_ERR; return 1; }
		printf("%g %g %s %s\n",display_time,delta_time,hash,path);
		paint(path);
		handlequeuedevents(d,hash, &display_time, &delta_time, &dieflag,1);
		while (display_time>0) {
			if	(nanosleep(&rqt,&rmt))
				{	if	(errno!=EINTR)
						{ AT_ERR; return 1; }
					display_time-=(rqt.tv_sec-rmt.tv_sec);
					display_time-=
						(float)(rqt.tv_nsec-rmt.tv_nsec)
						/(float)NSECS_IN_SEC; }
				else 	display_time-=rqt.tv_sec+(float)rqt.tv_nsec/(float)NSECS_IN_SEC;
			handlequeuedevents(d,hash, &display_time, &delta_time, &dieflag,0);
			if(dieflag) goto END; }
		if	(delta_time!=0)
			{	EXEC SQL BEGIN;
				EXEC SQL
					select post_delta(:hash,:delta_time)
					into :result :ind;
				if (sqlca.sqlcode<0) exit(EXIT_FAILURE);
				EXEC SQL COMMIT;
				if (sqlca.sqlcode<0) exit(EXIT_FAILURE); }}
	END:	if(display_time>0) enspool(hash,display_time,delta_time);
		else if	(delta_time!=0)
			{	EXEC SQL BEGIN;
				EXEC SQL
					select post_delta(:hash,:delta_time)
					into :result :ind;
				if (sqlca.sqlcode<0) exit(EXIT_FAILURE);
				EXEC SQL COMMIT;
				if (sqlca.sqlcode<0) exit(EXIT_FAILURE); }
		EXEC SQL DISCONNECT;
		XCloseDisplay(d);
		return 0; }
