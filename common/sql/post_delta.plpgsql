drop function if exists post_delta(char(40),real);
create or replace function
	post_delta
	(hash char(40), delta real)
	returns void
	/* eqns approximating decay & votes balanced in "steady state":
	1 vote = max_votes - max_votes * e(-age / period)
	(vote size cancels out if not 1 for eq in max_votes not max_popularity)
	period = -age / l( (max_votes - 1) / max_votes )
	Since we delete bad content over time, consider the range of what the
	system will "remember" to be from 0 to max_votes instead of from
	-max_votes to max_votes
	bits = l(max_votes) / l(2)
	max_votes = 2 ^ bits
	*/
	as	$TEXT$
		<<block0>>
		declare max_amp constant integer := 16777216; -- = 2^24
			period double precision;
			average_age double precision;
			age double precision;
			popularity double precision;
		begin	lock table dictionary;
			if	not exists
					(select * from dictionary
					where key='cache/average_time_since_last_vote')
				then	SELECT	AVG(EXTRACT(EPOCH FROM
						NOW()-LAST_VOTE_TIME))
						INTO average_age
						FROM POOL
						WHERE PATH IS NOT NULL;
					insert	into dictionary values
						('cache/average_time_since_last_vote',average_age);
				else	select value into average_age
					from dictionary where key='cache/average_time_since_last_vote';
				end if;
				period =
					- average_age
					/ ln( (max_amp-1.0)/max_amp );
			--raise notice '%', 'average_age: ' || average_age || 'period: ' || period;
			lock table pool;
			SELECT	pool.votes,
				EXTRACT(EPOCH FROM NOW()-LAST_VOTE_TIME)
                		INTO popularity, age FROM pool
				WHERE pool.hash=post_delta.hash;
			average_age=popularity;
			popularity=popularity*exp(-age/period)+delta;
			UPDATE pool
				SET LAST_VOTE_TIME=NOW(),
				votes=block0.popularity,
				last_end_time=now()
				WHERE pool.hash=post_delta.hash;
			raise notice 'post_delta(%', hash || ',' || delta || '): age: ' || age || ' popularity: ' || average_age || '->' || block0.popularity;
		end;
		$TEXT$
	language plpgsql;
--IN GOD WE TRVST.
